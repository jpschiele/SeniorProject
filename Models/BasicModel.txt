import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the dataset containing the average points scored by each team
data = pd.read_csv("college_basketball_scores.csv")

# Split the data into features (X) and target (y)
X = data[['team1_avg_points', 'team2_avg_points']]
y = data['total_points']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Train the linear regression model
reg = LinearRegression().fit(X_train, y_train)

# Use the model to predict the total points for the test data
y_pred = reg.predict(X_test)

# Calculate the mean squared error between the predicted and actual scores
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Use the trained model to predict the score of a new game
new_game = np.array([[75, 70]])
predicted_score = reg.predict(new_game)
print("Predicted Score:", predicted_score[0])






#2
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the data
data = pd.read_csv("college_basketball_data.csv")

# Split the data into features (X) and target variable (y)
X = data[['team1_ppg', 'team2_ppg']]
y = data['total_score']

# Train the linear regression model
model = LinearRegression()
model.fit(X, y)

# Use the trained model to make predictions
team1_ppg = 80
team2_ppg = 75

prediction = model.predict([[team1_ppg, team2_ppg]])
print("Predicted Score: ", prediction[0])




# import needed libraries
from urllib.request import urlopen
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np

# create pandas DataFrame
final_df = pd.DataFrame()

# list of all division one schools
schools = ['army']

for school in schools:
    url = f'http://www.sports-reference.com/cbb/schools/{school}/men/2022-gamelogs.html'
    str(url)
    print(url)
    # read the HTML table into a pandas DataFrame
    try:
        dfs = pd.read_html(url, header=1)
    except:
        print(school)
        continue
    # locate the game log table on the page
    game_log_df = dfs[0]

    # remove rows with multiple null values (repeat headers)
    game_log_df = game_log_df.dropna(thresh=len(game_log_df.columns)-3)

    # all rows with repeated headers
    game = game_log_df['G'].isin(['G'])

    # add school name to each row
    school_name =[]

    for i in range(0, len(game_log_df)):
        school_name.append(school)

    game_log_df["Team"] = school_name

    # remove overtime results and keep win/loss
    game_log_df["W/L"] = game_log_df["W/L"].astype(str).str[0]

    # add school game log to final DataFrame
    final_df = final_df.append(game_log_df[~game])

# headers for final DataFrame
final_df.columns = ['G', 'Date', 'Place', 'Opp', 'Result', 'TmScore',
                                   'OppScore', 'FG', 'FGA', 'FG%', '3PM',
                                   '3PA', '3P%', 'FTM', 'FTA', 'FT%', 'ORB', 'TRB',
                                   'AST', 'STL', 'BLK', 'TOV', 'PF', 'Empty',
                                   'FGOpp', 'FGAOpp', 'FG%Opp', '3POpp', '3PAOpp',
                                   '3P%Opp', 'FTOpp', 'FTAOpp', 'FT%Opp',
                                   'ORBOpp', 'TRBOpp', 'ASTOpp', 'STLOpp',
                                   'BLKOpp', 'TOVOpp', 'PFOpp', 'Team']

# 0-away game, 1-home game, 2-neutral site game
final_df.loc[final_df["Place"] == "@", "Place"] = 0
final_df.loc[final_df["Place"] == "N", "Place"] = 2
final_df["Place"] = final_df["Place"].replace(np.nan, 1)

# remove empty and game number columns
final_df.drop(final_df.columns[[0,23]], axis=1, inplace=True)

# save the game log table as a CSV file
final_df.to_csv('C:/Users/jpsch/OneDrive/Documents/SeniorProject/2022_team_data1.csv', index=False)
